[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Alexander Coppock Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alexander Coppock. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Coppock (2025). vayr: Extensions 'ggplot2' Visualize Randomize. R package version 0.0.9000, https://alexandercoppock.com.","code":"@Manual{,   title = {vayr: Extensions for 'ggplot2' to Visualize as You Randomize},   author = {Alexander Coppock},   year = {2025},   note = {R package version 0.0.9000},   url = {https://alexandercoppock.com}, }"},{"path":"/index.html","id":"vayr","dir":"","previous_headings":"","what":"Extensions for ggplot2 to Visualize as You Randomize","title":"Extensions for ggplot2 to Visualize as You Randomize","text":"goal ‘vayr’ provide ‘ggplot2’ extensions foster “visualize randomize” principles, guide visualization experimental data. Thus far, package includes position adjustments avoid -plotting, facilitating plotting statistical models “data-space.” words, position adjustments help organize “data-space,” can contextualize models. principles underlying ‘vayr’ outlined detail “Visualize Randomize: Design-Based Statistical Graphs Randomized Experiments.” paper can accessed PDF.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Extensions for ggplot2 to Visualize as You Randomize","text":"moment, ‘vayr’ exists GitHub, although ultimately hope release package CRAN. can install development version package using ‘pak,’ shown . important note ‘vayr’ relies ‘ggplot2,’ ‘packcircles,’ ‘withr,’ packages also installed.","code":"# install.packages(\"pak\") pak::pak(\"acoppock/vayr\")"},{"path":"/index.html","id":"contents","dir":"","previous_headings":"","what":"Contents","title":"Extensions for ggplot2 to Visualize as You Randomize","text":"current version ‘vayr’ contains handful new ‘ggplot2’ functions, may applied position adjustments point geom: position_jitter_ellipse(), position_sunflower(), position_circlepack(); well dodged counterparts: position_jitterdodge_ellipse(), position_sunflowerdodge(), position_circlepackdodge(). functions avoid perfect -plotting therefore useful plotting discrete rather continuous data bivariate context. matter demonstration, used visualize synthetic data, -plotted origin. position product discrete variables alone, perfect -plotting particular concern. mitigate concern, position_jitter() can introduce degree variation, whereby points randomly sampled rectangle, dilutes visual effect discrete data. functions ‘vayr’ preferable alternatives.","code":"library(dplyr) library(ggplot2) library(patchwork) library(vayr) library(estimatr)  dat <- data.frame(   X = c(rep(0, 200)),   Y = c(rep(0, 200)),   Group = (rep(c(\"A\", \"B\", \"B\", \"B\"), 50)),   Size = runif(200, 0, 1),   Enum = 1:200 ) # perfectly over-plotted points overplot <- ggplot(dat, aes(x = X, y = Y)) +   geom_point() +   coord_equal(xlim = c(-1.1, 1.1), ylim = c(-1.1, 1.1)) +   theme_bw() +   theme(axis.title = element_blank(),         plot.title = element_text(hjust = 0.5, face = \"bold\")) +   ggtitle('\"perfect over-plotting\"')  # position_jitter() plot <- ggplot(dat, aes(x = X, y = Y)) +    geom_point(position = position_jitter(width = 0.5, height = 0.5)) +   coord_equal(xlim = c(-1.1, 1.1), ylim = c(-1.1, 1.1)) +   theme_bw() +   theme(axis.title = element_blank(),         plot.title = element_text(hjust = 0.5, face = \"bold\")) +   ggtitle(\"position_jitter()\")   overplot + plot"},{"path":"/index.html","id":"position-jitter-ellipse","dir":"","previous_headings":"Contents","what":"Position Jitter Ellipse:","title":"Extensions for ggplot2 to Visualize as You Randomize","text":"position adjustment adds elliptical random noise perfectly -plotted points, offering pleasing way visualize many points represent position. benefit sampling ellipse (given height width) rather rectangle resulting dispersion retains impression single point. size meta-points constant across graph, density varies depending amount -plotting.","code":"# position_jitter_ellipse() plot <- ggplot(dat, aes(x = X, y = Y)) +   geom_point(position = position_jitter_ellipse(width = 0.5, height = 0.5)) +   coord_equal(xlim = c(-1.1, 1.1), ylim = c(-1.1, 1.1)) +   theme_bw() +   theme(axis.title = element_blank(),         plot.title = element_text(hjust = 0.5, face = \"bold\")) +   ggtitle(\"position_jitter_ellipse()\")  # position_jitterdodge_ellipse() dodged_plot <- ggplot(dat, aes(x = X, y = Y, color = Group)) +   geom_point(position = position_jitterdodge_ellipse(dodge.width = 2,                                                       jitter.width = 0.5,                                                       jitter.height = 0.5)) +   coord_equal(xlim = c(-1.1, 1.1), ylim = c(-1.1, 1.1)) +   theme_bw() +   theme(legend.position = \"none\",         axis.title = element_blank(),         plot.title = element_text(hjust = 0.5, face = \"bold\")) +   ggtitle(\"position_jitterdodge_ellipse()\")    plot + dodged_plot"},{"path":"/index.html","id":"position-sunflower","dir":"","previous_headings":"Contents","what":"Position Sunflower:","title":"Extensions for ggplot2 to Visualize as You Randomize","text":"position adjustment arranges perfectly -plotted points using sunflower algorithm, produces pattern resembles seeds sunflower. algorithm works inside order data. parameters position adjustment (density aspect_ratio) novel intuitive. size meta-points (flowers, ) varies depending amount -plotting, density pattern remains constant. possible adjust aspect ratio meta-points, generally recommended position adjustment used tandem coord_equal(), case aspect ratio 1 (default) yield perfect circles.  stated, density seeds can adjusted. Density standardized rather depends ranges axes dimensions image. Loosely, can thought number points within certain Cartesian area. Thus smaller ranges /larger dimensions require greater density produce visual effect.  aspect ratio flowers can also tweaked. useful position adjustment used without coord_equal(). flowers can made wider taller compensate aspect ratio axes /image, case aspect ratio flower set opposite aspect ratio must compensate. instance, saving plot vertical range 2 horizontal range 1 square image result wide flowers. Setting aspect ratio flowers 1/2 offset distortion, although refinement likely warranted due labels, legends, like.","code":"# position_sunflower() plot <- ggplot(dat, aes(x = X, y = Y)) +   geom_point(position = position_sunflower(density = 1, aspect_ratio = 1)) +   coord_equal(xlim = c(-1.1, 1.1), ylim = c(-1.1, 1.1)) +   theme_bw() +   theme(axis.title = element_blank(),         plot.title = element_text(hjust = 0.5, face = \"bold\")) +   ggtitle(\"position_sunflower()\")    # position_sunflowerdodge() dodged_plot <- ggplot(dat, aes(x = X, y = Y, color = Group)) +   geom_point(position = position_sunflowerdodge(width = 2, density = 1, aspect_ratio = 1)) +   coord_equal(xlim = c(-1.1, 1.1), ylim = c(-1.1, 1.1)) +   theme_bw() +    theme(legend.position = \"none\",         axis.title = element_blank(),         plot.title = element_text(hjust = 0.5, face = \"bold\")) +   ggtitle(\"position_sunflowerdodge()\")    plot + dodged_plot # base plot plot <- ggplot(dat, aes(x = X, y = Y)) +   coord_equal(xlim = c(-1.1, 1.1), ylim = c(-1.1, 1.1)) +   theme_bw() +   theme(axis.title = element_blank(),         plot.title = element_text(hjust = 0.5, face = \"bold\"))  # low density low <- plot + geom_point(position = position_sunflower(density = 0.5, aspect_ratio = 1),                          size = 0.25) + ggtitle(\"density = 0.5\")  # medium density medium <- plot + geom_point(position = position_sunflower(density = 1, aspect_ratio = 1),                             size = 0.25) + ggtitle(\"density = 1\")  # high density high <- plot + geom_point(position = position_sunflower(density = 2, aspect_ratio = 1),                           size = 0.25) + ggtitle(\"density = 2\")  low + medium + high # base plot plot <- ggplot(dat, aes(x = X, y = Y)) +   coord_equal(xlim = c(-1.1, 1.1), ylim = c(-1.1, 1.1)) +   theme_bw() +   theme(axis.title = element_blank(),         plot.title = element_text(hjust = 0.5, face = \"bold\"))  # wide aspect ratio  wide <- plot + geom_point(position = position_sunflower(density = 1, aspect_ratio = 0.5),                          size = 0.25) + ggtitle(\"aspect_ratio = 0.5\")  # normal aspect ratio normal <- plot + geom_point(position = position_sunflower(density = 1, aspect_ratio = 1),                             size = 0.25) + ggtitle(\"aspect_ratio = 1\")  # tall aspect ratio tall <- plot + geom_point(position = position_sunflower(density = 1, aspect_ratio = 2),                           size = 0.25) + ggtitle(\"aspect_ratio = 2\")  wide + normal + tall"},{"path":"/index.html","id":"position-circle-pack","dir":"","previous_headings":"Contents","what":"Position Circle Pack:","title":"Extensions for ggplot2 to Visualize as You Randomize","text":"position adjustment uses circle packing algorithms ‘packcircles’ package arrange perfectly -plotted points varying sizes elliptical area. also takes density aspect_ratio parameters, function previously described. , desirable density depend ranges axes dimensions image.  Like position_sunflower(), position_circlepack() creates meta-points inside order data. Thus, arranging data size organize meta-points accordingly.","code":"# position_circlepack() plot <- ggplot(dat, aes(x = X, y = Y, size = Size)) +   geom_point(position = position_circlepack(density = 0.25, aspect_ratio = 1),              alpha = 0.25) +   coord_equal(xlim = c(-1, 1), ylim = c(-1.1, 1.1)) +   theme_bw() +   theme(legend.position = \"none\",         axis.title = element_blank(),         plot.title = element_text(hjust = 0.5, face = \"bold\")) +   ggtitle(\"position_circlepack()\")    # position_circlepackdodge() dodged_plot <- ggplot(dat, aes(x = X, y = Y, color = Group, size = Size)) +   geom_point(position = position_circlepackdodge(width = 2, density = 0.25, aspect_ratio = 1),              alpha = 0.25) +   coord_equal(xlim = c(-1, 1), ylim = c(-1.1, 1.1)) +   theme_bw() +    theme(legend.position = \"none\",         axis.title = element_blank(),         plot.title = element_text(hjust = 0.5, face = \"bold\")) +   ggtitle(\"position_circlepackdodge()\")    plot + dodged_plot # random size, base plot random <- dat |> ggplot(aes(x = X, y = Y, size = Size)) +   geom_point(position = position_circlepack(density = 0.075, aspect_ratio = 1),              alpha = 0.25) +   coord_equal(xlim = c(-1, 1), ylim = c(-1.1, 1.1)) +   theme_bw() +   theme(legend.position = \"none\",         axis.title = element_blank(),         plot.title = element_text(hjust = 0.5, face = \"bold\")) +   ggtitle(\"random\")  # ascending size ascending <- random %+% (dat |> arrange(Size)) + ggtitle(\"ascending\")  # descending size descending <- random %+% (dat |> arrange(desc(Size))) + ggtitle(\"descending\")  random + ascending + descending"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example:","title":"Extensions for ggplot2 to Visualize as You Randomize","text":"current version ‘vayr’ also includes data Patriot Act experiment described Persuasion Parallel. Patriot Act anti-terrorism law; eponymous dataset, patriot_act, contains data relating experiment measured support law exposing participants statements cast either negative positive light. experiment conducted 2009 nationwide sample, replicated 2015 sample MTurkers. instances, treatments parallel effect Democrats Republicans. four variables data: sample_label, study participant belonged (Original Study Mechanical Turk Replication); pid_3, partisanship participant (Republican Democrat); T1_content, statements participant exposed (Control, Pro, Con); PA_support, participant’s post-treatment support Patriot Act (1: Oppose strongly 7: Support strongly). data visualized using position_sunflowerdodge() ‘vayr’ demonstrate package’s functionality real-world example.","code":"# A df for statistical models summary_df <- patriot_act |>    group_by(T1_content, pid_3, sample_label) |>    reframe(tidy(lm_robust(PA_support~1)))  # A df for direct labels label_df <- summary_df |>    filter(sample_label == \"Original Study\", T1_content == \"Control\") |>    mutate(PA_support = case_when(pid_3 == \"Democrat\"~conf.low - 0.15,                                  pid_3 == \"Republican\"~conf.high + 0.15))  ggplot(patriot_act, aes(T1_content, PA_support, color = pid_3, group = pid_3)) +   # the data   geom_point(position = position_sunflowerdodge(width = 0.5, density = 10),              size = 0.1, alpha = 0.5) +   # the statistical model   geom_line(data = summary_df, aes(x = T1_content, y = estimate),               position = position_dodge(width = 0.5), linewidth = 0.5) +     geom_point(data = summary_df, aes(x = T1_content, y = estimate),                position = position_dodge(width = 0.5), size = 3) +   geom_linerange(data = summary_df, aes(x = T1_content, ymin = conf.low, ymax = conf.high, y = estimate),                  position = position_dodge(width = 0.5)) +   # the direct labels   geom_text(data = label_df, aes(label = pid_3)) +   # the rest   scale_color_manual(values = c(\"blue4\", \"red3\")) +   scale_y_continuous(breaks = 1:7) +   coord_equal() +   facet_wrap(~sample_label) +   theme_bw() +   theme(legend.position = \"none\",         strip.background = element_blank(),         panel.grid.minor = element_blank()) +   labs(y = \"Do you oppose or support the Patriot Act?             [1: Oppose very strongly to 7: Support very strongly]\",        x = \"Randomly assigned information\")"},{"path":"/reference/patriot_act.html","id":null,"dir":"Reference","previous_headings":"","what":"Original and Replication data for the Patriot Act experiment described in Persuasion in Parallel — patriot_act","title":"Original and Replication data for the Patriot Act experiment described in Persuasion in Parallel — patriot_act","text":"Original Replication data Patriot Act experiment described Persuasion Parallel","code":""},{"path":"/reference/patriot_act.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Original and Replication data for the Patriot Act experiment described in Persuasion in Parallel — patriot_act","text":"","code":"patriot_act"},{"path":[]},{"path":"/reference/patriot_act.html","id":"patriot-act","dir":"Reference","previous_headings":"","what":"patriot_act","title":"Original and Replication data for the Patriot Act experiment described in Persuasion in Parallel — patriot_act","text":"data frame 2062 rows 4 columns: sample_label original study (Chong Druckman (2011) Mechanical Turk replication) pid_3 Subject partisanship (limited Republicans Democracts, including leaners) T1_content Content assigned treatment condition: pro-Patriot act statements, anti-Patriot act statements, control PA_support Post-treatment support Patriot Act 1 7 Likert scale","code":""},{"path":"/reference/patriot_act.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Original and Replication data for the Patriot Act experiment described in Persuasion in Parallel — patriot_act","text":"https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/I9GSKI","code":""},{"path":"/reference/position_circlepack.html","id":null,"dir":"Reference","previous_headings":"","what":"Use circle packing to avoid over-plotting — position_circlepack","title":"Use circle packing to avoid over-plotting — position_circlepack","text":"function uses circle packing algorithms 'packcircles' package arrange perfectly -plotted points varying sizes elliptical area. density aspect ratio can adjusted. function position adjustment, correct density factor image size limits x y axes.","code":""},{"path":"/reference/position_circlepack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use circle packing to avoid over-plotting — position_circlepack","text":"","code":"position_circlepack(density = 1, aspect_ratio = 1)"},{"path":"/reference/position_circlepack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use circle packing to avoid over-plotting — position_circlepack","text":"density density circle pack aspect_ratio aspect_ratio adjustment elliptical area","code":""},{"path":"/reference/position_circlepack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use circle packing to avoid over-plotting — position_circlepack","text":"ggproto object class PositionCirclePack","code":""},{"path":"/reference/position_circlepack.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use circle packing to avoid over-plotting — position_circlepack","text":"","code":"library(ggplot2)   library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union   library(randomizr)   library(tibble)    dat <-     tibble(       age_group = rep(c(\"young\", \"middle\", \"old\"), c(100, 200, 300)),       treatment = block_ra(age_group, block_m = c(50, 50, 50)),       latent_outcome =         case_when(age_group == \"young\" & treatment == 0 ~ 0.10,                   age_group == \"young\" & treatment == 1 ~ 0.20,                   age_group == \"middle\" & treatment == 0 ~ 0.40,                   age_group == \"middle\" & treatment == 1 ~ 0.45,                   age_group == \"old\" & treatment == 0 ~ 0.70,                   age_group == \"old\" & treatment == 1 ~ 0.90),       outcome = rbinom(600, size = 1,                        prob = latent_outcome)   )    dat <-     dat |>     mutate(       treatment_prob =         case_when(age_group == \"young\" ~ 50/100,                   age_group == \"middle\" ~ 50/200,                   age_group == \"old\" ~ 50/300),       weights = 1/case_when(treatment == 1 ~ treatment_prob,                             treatment == 0 ~ 1 - treatment_prob)     )    ggplot(dat, aes(treatment, outcome, size = weights, color = age_group)) +     geom_point(alpha = 0.5, position = position_circlepack(density = 0.5))"},{"path":"/reference/position_circlepackdodge.html","id":null,"dir":"Reference","previous_headings":"","what":"Arrange over-plotted points with a circle-packing algorithm and dodge groups side-to-side — position_circlepackdodge","title":"Arrange over-plotted points with a circle-packing algorithm and dodge groups side-to-side — position_circlepackdodge","text":"function dodges groups arranges -plotted points (various sizes) using algorithms 'packcirles' package. algorithms applied per group.","code":""},{"path":"/reference/position_circlepackdodge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arrange over-plotted points with a circle-packing algorithm and dodge groups side-to-side — position_circlepackdodge","text":"","code":"position_circlepackdodge(width = 1, density = 1, aspect_ratio = 1)"},{"path":"/reference/position_circlepackdodge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arrange over-plotted points with a circle-packing algorithm and dodge groups side-to-side — position_circlepackdodge","text":"width dodging width density density circle pack aspect_ratio aspect_ratio adjustment elliptical area","code":""},{"path":"/reference/position_circlepackdodge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arrange over-plotted points with a circle-packing algorithm and dodge groups side-to-side — position_circlepackdodge","text":"ggproto object class PositionCirclePackDodge","code":""},{"path":"/reference/position_circlepackdodge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arrange over-plotted points with a circle-packing algorithm and dodge groups side-to-side — position_circlepackdodge","text":"","code":"library(ggplot2)    dat <- data.frame(     X = c(rep(0, 200)),     Y = rep(0, 200),     size = runif(200, 0, 1),     id = (rep(c(\"A\", \"B\"), 100))   )    ggplot(dat, aes(x = X, y = Y, size = size, color = id)) +     geom_point(position = position_circlepackdodge(width = 1, density = 1, aspect_ratio = 1),               alpha = 0.25) +     coord_equal(xlim = c(-1, 1), ylim = c(-1, 1), expand = TRUE) +     scale_size_continuous(range = c(1, 3)) +     theme(legend.position = \"none\")"},{"path":"/reference/position_jitter_ellipse.html","id":null,"dir":"Reference","previous_headings":"","what":"Jitter points on an ellipse to avoid over-plotting — position_jitter_ellipse","title":"Jitter points on an ellipse to avoid over-plotting — position_jitter_ellipse","text":"function adds elliptical random noise perfectly -plotted points, offering pleasing way visualize many points represent position. contrast position_jitter function samples rectangle, position_jitter_ellipse function samples ellipse. function takes algorithmic inspiration https://stackoverflow.com/questions/5529148/algorithm-calculate-pseudo-random-point-inside--ellipse https://stats.stackexchange.com/questions/120527/simulate--uniform-distribution---disc.","code":""},{"path":"/reference/position_jitter_ellipse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Jitter points on an ellipse to avoid over-plotting — position_jitter_ellipse","text":"","code":"position_jitter_ellipse(width = NULL, height = NULL, seed = NA)"},{"path":"/reference/position_jitter_ellipse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Jitter points on an ellipse to avoid over-plotting — position_jitter_ellipse","text":"width, height Amount vertical horizontal jitter. jitter added positive negative directions, total spread twice value specified . omitted, defaults 40% resolution data: means jitter values occupy 80% implied bins. Categorical data aligned integers, width height 0.5 spread data possible see distinction categories. seed random seed make jitter reproducible. Useful need apply jitter twice, e.g., point corresponding label. random seed reset jittering. NA (default value), seed initialised random value; makes sure two subsequent calls start different seed. Use NULL use current random seed also avoid resetting (behaviour ggplot 2.2.1 earlier).","code":""},{"path":"/reference/position_jitter_ellipse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Jitter points on an ellipse to avoid over-plotting — position_jitter_ellipse","text":"ggproto object class PositionJitterEllipse","code":""},{"path":"/reference/position_jitter_ellipse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Jitter points on an ellipse to avoid over-plotting — position_jitter_ellipse","text":"","code":"library(ggplot2)    dat <- data.frame(x = rep(1, 500), y = rep(1, 500))    # Jitter on an ellipse.   ggplot(dat, aes(x, y)) +     geom_point(position = position_jitter_ellipse(width = 0.5, height = 0.5)) +     coord_cartesian(xlim = c(0, 2), ylim = c(0, 2))     # Jitter on a rectangle, for comparison.   ggplot(dat, aes(x, y)) +     geom_point(position = position_jitter(width = 0.5, height = 0.5)) +     coord_cartesian(xlim = c(0, 2), ylim = c(0, 2))"},{"path":"/reference/position_jitterdodge_ellipse.html","id":null,"dir":"Reference","previous_headings":"","what":"Jitter points on an ellipse and dodge groups simultaneously — position_jitterdodge_ellipse","title":"Jitter points on an ellipse and dodge groups simultaneously — position_jitterdodge_ellipse","text":"well adding elliptical random noise -plotted points, function also dodges groups points side--side.","code":""},{"path":"/reference/position_jitterdodge_ellipse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Jitter points on an ellipse and dodge groups simultaneously — position_jitterdodge_ellipse","text":"","code":"position_jitterdodge_ellipse(   jitter.width = NULL,   jitter.height = NULL,   dodge.width = 1,   seed = NA )"},{"path":"/reference/position_jitterdodge_ellipse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Jitter points on an ellipse and dodge groups simultaneously — position_jitterdodge_ellipse","text":"jitter.width degree jitter x direction. Defaults 40% resolution data. jitter.height degree jitter y direction. Defaults 0. dodge.width amount dodge x direction. Defaults 0.75, default position_dodge() width. seed random seed make jitter reproducible. Useful need apply jitter twice, e.g., point corresponding label. random seed reset jittering. NA (default value), seed initialised random value; makes sure two subsequent calls start different seed. Use NULL use current random seed also avoid resetting (behaviour ggplot 2.2.1 earlier).","code":""},{"path":"/reference/position_jitterdodge_ellipse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Jitter points on an ellipse and dodge groups simultaneously — position_jitterdodge_ellipse","text":"ggproto object class PositionJitterdodgeEllipse","code":""},{"path":"/reference/position_jitterdodge_ellipse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Jitter points on an ellipse and dodge groups simultaneously — position_jitterdodge_ellipse","text":"","code":"library(ggplot2)    dat <- data.frame(x = rep(1, 500), y = rep(1, 500),                     group = sample(LETTERS[1:2], 500, replace = TRUE))    ggplot(dat, aes(x, y, shape = group)) +     geom_point(position = position_jitterdodge_ellipse(jitter.width  = 0.5,                                                        jitter.height =  0.5,                                                        dodge.width = 1)) +     coord_cartesian(xlim = c(0, 2), ylim = c(0, 2))"},{"path":"/reference/position_sunflower.html","id":null,"dir":"Reference","previous_headings":"","what":"Arrange over-plotted points in a sunflower pattern — position_sunflower","title":"Arrange over-plotted points in a sunflower pattern — position_sunflower","text":"function applies sunflower algorithm, executed sunflower function, position adjustment, arranging overlapping points given x y sunflower pattern.","code":""},{"path":"/reference/position_sunflower.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arrange over-plotted points in a sunflower pattern — position_sunflower","text":"","code":"position_sunflower(density = 1, aspect_ratio = 1)"},{"path":"/reference/position_sunflower.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arrange over-plotted points in a sunflower pattern — position_sunflower","text":"density seed density aspect_ratio aspect ratio adjustment","code":""},{"path":"/reference/position_sunflower.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arrange over-plotted points in a sunflower pattern — position_sunflower","text":"ggproto object class PositionSunflower","code":""},{"path":"/reference/position_sunflower.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arrange over-plotted points in a sunflower pattern — position_sunflower","text":"","code":"library(ggplot2)    # Use the sunflower position function to arrange N points   N <- 100    dat <- data.frame(     x = rep(1:4, times = N),     y = rep(1:4, times = N)   )    ggplot(dat, aes(x = x, y = y)) +     geom_point(size = 1, position = position_sunflower(density = 1, aspect_ratio = 1)) +     xlim(0, 5) +     ylim(0, 5) +     coord_equal()"},{"path":"/reference/position_sunflowerdodge.html","id":null,"dir":"Reference","previous_headings":"","what":"Arrange over-plotted points in a sunflower pattern and dodges groups side-to-side — position_sunflowerdodge","title":"Arrange over-plotted points in a sunflower pattern and dodges groups side-to-side — position_sunflowerdodge","text":"function applies sunflower position adjustment alongside dodge position adjustment, arranging overlapping points per x, y, group sunflower pattern.","code":""},{"path":"/reference/position_sunflowerdodge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arrange over-plotted points in a sunflower pattern and dodges groups side-to-side — position_sunflowerdodge","text":"","code":"position_sunflowerdodge(width = 1, density = 1, aspect_ratio = 1)"},{"path":"/reference/position_sunflowerdodge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arrange over-plotted points in a sunflower pattern and dodges groups side-to-side — position_sunflowerdodge","text":"width dodging width density seed density aspect_ratio aspect ratio adjustment","code":""},{"path":"/reference/position_sunflowerdodge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arrange over-plotted points in a sunflower pattern and dodges groups side-to-side — position_sunflowerdodge","text":"ggproto object class PositionSunflowerDodge","code":""},{"path":"/reference/position_sunflowerdodge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arrange over-plotted points in a sunflower pattern and dodges groups side-to-side — position_sunflowerdodge","text":"","code":"library(ggplot2)    # Use the sunflower dodge position function to arrange and dodge N points.   N <- 300    dat <- data.frame(     x = sample(1:2, size = N, replace = TRUE),     y = sample(1:7, size = N, replace = TRUE),     type = factor(sample(LETTERS[1:2], N, replace = TRUE))   )    # With coord_equal   ggplot(dat, aes(x, y, color = type, shape = type)) +     geom_point(position = position_sunflowerdodge(width = 0.5, density = 2, aspect_ratio = 1)) +     coord_equal()     # Without coord_equal, might want to play with aspect ratio to get a pleasing plot   ggplot(dat, aes(x, y, color = type, shape = type)) +     geom_point(position = position_sunflowerdodge(width = 0.5, density = 10, aspect_ratio = 4))     # As applied to the Patriot Act experiment   ggplot(patriot_act, aes(T1_content, PA_support, color = pid_3, group = pid_3)) +     geom_point(size = 0.25, position = position_sunflowerdodge(width = 0.5,                                                               density = 10,                                                               aspect_ratio = 7/6)) +     scale_color_manual(values = c(\"blue\", \"red\")) +     facet_wrap(~sample_label) +     stat_smooth(position = position_dodge(width = 0.5)) #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x' #> Warning: Removed 3 rows containing non-finite outside the scale range (`stat_smooth()`). #> Warning: pseudoinverse used at 0.99 #> Warning: neighborhood radius 2.01 #> Warning: reciprocal condition number  1.9763e-16 #> Warning: There are other near singularities as well. 4.0401 #> Warning: pseudoinverse used at 0.99 #> Warning: neighborhood radius 2.01 #> Warning: reciprocal condition number  1.9763e-16 #> Warning: There are other near singularities as well. 4.0401 #> Warning: pseudoinverse used at 0.99 #> Warning: neighborhood radius 2.01 #> Warning: reciprocal condition number  0 #> Warning: There are other near singularities as well. 4.0401 #> Warning: pseudoinverse used at 0.99 #> Warning: neighborhood radius 2.01 #> Warning: reciprocal condition number  0 #> Warning: There are other near singularities as well. 4.0401 #> Warning: pseudoinverse used at 0.99 #> Warning: neighborhood radius 2.01 #> Warning: reciprocal condition number  1.6112e-16 #> Warning: There are other near singularities as well. 4.0401 #> Warning: pseudoinverse used at 0.99 #> Warning: neighborhood radius 2.01 #> Warning: reciprocal condition number  1.6112e-16 #> Warning: There are other near singularities as well. 4.0401 #> Warning: pseudoinverse used at 0.99 #> Warning: neighborhood radius 2.01 #> Warning: reciprocal condition number  8.5586e-17 #> Warning: There are other near singularities as well. 4.0401 #> Warning: pseudoinverse used at 0.99 #> Warning: neighborhood radius 2.01 #> Warning: reciprocal condition number  8.5586e-17 #> Warning: There are other near singularities as well. 4.0401 #> Warning: `position_dodge()` requires non-overlapping x intervals. #> Warning: `position_dodge()` requires non-overlapping x intervals."},{"path":"/reference/sunflower.html","id":null,"dir":"Reference","previous_headings":"","what":"Distribute points using a ","title":"Distribute points using a ","text":"function distributes points ellipse via sunflower seed algorithm, solution -plotting. implement algorithm, function adapts code https://stackoverflow.com/questions/28567166/uniformly-distribute-x-points-inside--circle.","code":""},{"path":"/reference/sunflower.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distribute points using a ","text":"","code":"sunflower(x = NULL, y = NULL, density, aspect_ratio)"},{"path":"/reference/sunflower.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distribute points using a ","text":"x x position y y position density seed density aspect_ratio aspect ratio adjustment","code":""},{"path":"/reference/sunflower.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distribute points using a ","text":"numeric vector adjusted x y positions, computed using sunflower seed distribution.","code":""},{"path":"/reference/sunflower.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distribute points using a ","text":"","code":"library(ggplot2)   library(dplyr)    # Manually adjust position of N points,   # arranging points per the sunflower algorithm and then dodging groups   N <- 300    dat <- data.frame(     x = sample(1:2, size = N, replace = TRUE),     y = sample(1:7, size = N, replace = TRUE),     type = factor(sample(LETTERS[1:2], N, replace = TRUE))   ) %>%     group_by(x, y, type) %>%     mutate(       x = sunflower(x = x, density = 1, aspect_ratio = 1),       y = sunflower(y = y, density = 1, aspect_ratio = 1),       x = if_else(type == \"A\", x - (1 / 8), x + (1 / 8))     )    ggplot(dat, aes(x, y, color = type, shape = type)) +     geom_point() + coord_equal()"},{"path":"/reference/vayr.html","id":null,"dir":"Reference","previous_headings":"","what":"Extensions for 'ggplot2' to Visualize as You Randomize — vayr","title":"Extensions for 'ggplot2' to Visualize as You Randomize — vayr","text":"Position adjustments 'ggplot2' implement \"visualize randomize\" principles, can especially useful plotting experimental data.","code":""},{"path":"/reference/vayr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extensions for 'ggplot2' to Visualize as You Randomize — vayr","text":"'vayr' package provides 'ggplot2' extensions foster \"visualize randomize\" principles. principles guide visualization experimental data. Thus far, package includes position adjustments avoid -plotting, facilitating plotting \"data-space.\" 'vayr' paper : https://alexandercoppock.com/coppock_2020.pdf.","code":""},{"path":[]},{"path":"/reference/vayr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extensions for 'ggplot2' to Visualize as You Randomize — vayr","text":"Maintainer: Alexander Coppock acoppock@gmail.com (ORCID)","code":""}]
