[{"path":"https://alexandercoppock.com/vayr/index.html/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Alexander Coppock Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://alexandercoppock.com/vayr/index.html/articles/vayr-vignette.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"vayr","text":"release version vayr can installed CRAN, development version can installed GitHub using package like remotes, devtools, pak. important note vayr relies ggplot2, packcircles, withr, must installed well.","code":"# From CRAN install.packages(\"vayr\")  # From GitHub # install.packages(\"pak\") pak::pak(\"acoppock/vayr\")"},{"path":"https://alexandercoppock.com/vayr/index.html/articles/vayr-vignette.html","id":"contents","dir":"Articles","previous_headings":"","what":"Contents","title":"vayr","text":"vayr contains handful ggplot2 functions apply position adjustments “point-like” geoms geom_point geom_text: position_jitter_ellipse() position_jitterdodge_ellipse() position_sunflower() position_sunflowerdodge() position_circlepack() position_circlepackdodge() functions avoid -plotting, especially useful plotting discrete rather continuous data. matter demonstration, used visualize synthetic data, -plotted origin. position product discrete variables alone, -plotting particular concern. position_jitter() can mitigate concern. introduces variation randomly sampling points rectangle. approach effective can unattractive. position adjustments vayr attempts better.","code":"library(dplyr) library(estimatr) library(ggplot2) library(patchwork) library(vayr)  dat <- data.frame(   x = c(rep(0, 200)),   y = c(rep(0, 200)),   group = (rep(c(\"A\", \"B\", \"B\", \"B\"), 50)),   size = runif(200, 0, 1) ) # perfectly over-plotted points over_plot <- ggplot(dat, aes(x = x, y = y)) +   geom_point() +   coord_equal(xlim = c(-1.1, 1.1),                ylim = c(-1.1, 1.1)) +   theme_bw() +   theme(axis.title = element_blank(),         plot.title = element_text(hjust = 0.5, face = \"bold\")) +   ggtitle('\"perfect over-plotting\"')  # position_jitter() jitter_plot <- ggplot(dat, aes(x = x, y = y)) +    geom_point(position = position_jitter(width = 0.5,                                          height = 0.5)) +   coord_equal(xlim = c(-1.1, 1.1),                ylim = c(-1.1, 1.1)) +   theme_bw() +   theme(axis.title = element_blank(),         plot.title = element_text(hjust = 0.5, face = \"bold\")) +   ggtitle(\"position_jitter()\")  over_plot + jitter_plot"},{"path":"https://alexandercoppock.com/vayr/index.html/articles/vayr-vignette.html","id":"position-jitter-ellipse","dir":"Articles","previous_headings":"Contents","what":"Position Jitter Ellipse","title":"vayr","text":"position adjustment adds elliptical random noise perfectly -plotted points, offering pleasing way visualize many points represent position. benefit sampling ellipse given height width rather rectangle resulting dispersion retains impression single point. size ellipses stays constant, density varies depending amount data.","code":"# position_jitter_ellipse() jitter_ellipse_plot <- ggplot(dat, aes(x = x, y = y)) +   geom_point(position = position_jitter_ellipse(width = 0.5,                                                  height = 0.5)) +   coord_equal(xlim = c(-1.1, 1.1),                ylim = c(-1.1, 1.1)) +   theme_bw() +   theme(axis.title = element_blank(),         plot.title = element_text(hjust = 0.5, face = \"bold\")) +   ggtitle(\"position_jitter_ellipse()\")  # position_jitterdodge_ellipse() jitterdodge_ellipse_plot <- ggplot(dat, aes(x = x, y = y, color = group)) +   geom_point(position = position_jitterdodge_ellipse(dodge.width = 2,                                                       jitter.width = 0.5,                                                       jitter.height = 0.5)) +   coord_equal(xlim = c(-1.1, 1.1),                ylim = c(-1.1, 1.1)) +   theme_bw() +   theme(legend.position = \"none\",         axis.title = element_blank(),         plot.title = element_text(hjust = 0.5, face = \"bold\")) +   ggtitle(\"position_jitterdodge_ellipse()\")    jitter_ellipse_plot + jitterdodge_ellipse_plot"},{"path":"https://alexandercoppock.com/vayr/index.html/articles/vayr-vignette.html","id":"position-sunflower","dir":"Articles","previous_headings":"Contents","what":"Position Sunflower","title":"vayr","text":"position adjustment arranges perfectly -plotted points using sunflower algorithm, produces pattern resembles seeds sunflower, working inside order data. parameters position adjustment density aspect_ratio. size flowers varies depending amount -plotting, density pattern remains constant. generally recommended position adjustment used along coord_equal(), case default aspect ratio 1 yields perfectly circular flowers, aspect ratio flowers can adjusted need .  density parameter controls density pattern. density 1 normalized 100 points unit circle; density 2, 200 points; density 0.5, 50 points. density normalized relative Cartesian units, visual effect depends ranges axes dimensions saved image; smaller ranges larger dimensions require greater density produce visual effect. size points also taken account.  aspect_ratio parameter changes aspect ratio flowers, width divided height. useful using position adjustment without coord_equal(). flowers can made wider taller compensate aspect ratio axes image. aspect ratio flowers set opposite aspect ratio must compensate. instance, consider plot anx axis ranges 0 1, y axis ranges 0 2. Saving plot square image squish y axis, resulting wider flowers. Setting aspect ratio flowers 0.5 offset distortion.","code":"# position_sunflower() sunflower_plot <- ggplot(dat, aes(x = x, y = y)) +   geom_point(position = position_sunflower(density = 1,                                             aspect_ratio = 1)) +   coord_equal(xlim = c(-2.1, 2.1),                ylim = c(-2.1, 2.1)) +   theme_bw() +   theme(axis.title = element_blank(),         plot.title = element_text(hjust = 0.5, face = \"bold\")) +   ggtitle(\"position_sunflower()\")    # position_sunflowerdodge() sunflowerdodge_plot <- ggplot(dat, aes(x = x, y = y, color = group)) +   geom_point(position = position_sunflowerdodge(width = 4,                                                  density = 1,                                                  aspect_ratio = 1)) +   coord_equal(xlim = c(-2.1, 2.1),                ylim = c(-2.1, 2.1)) +   theme_bw() +    theme(legend.position = \"none\",         axis.title = element_blank(),         plot.title = element_text(hjust = 0.5, face = \"bold\")) +   ggtitle(\"position_sunflowerdodge()\")    sunflower_plot + sunflowerdodge_plot"},{"path":"https://alexandercoppock.com/vayr/index.html/articles/vayr-vignette.html","id":"position-circle-pack","dir":"Articles","previous_headings":"Contents","what":"Position Circle Pack","title":"vayr","text":"position adjustment uses circle packing algorithms packcircles arrange perfectly -plotted points varying sizes elliptical area. also takes density aspect_ratio parameters. position adjustment confused geom_circlepack() ggcirclepack can found GitHub.  Like position_sunflower() position_circlepack() works inside order data. arranging data size organizes points accordingly.","code":"# position_circlepack() circlepack_plot <- ggplot(dat, aes(x = x, y = y, size = size)) +   geom_point(alpha = 0.25,              position = position_circlepack(density = 0.25,                                              aspect_ratio = 1)) +   coord_equal(xlim = c(-1, 1),                ylim = c(-1.1, 1.1)) +   theme_bw() +   theme(legend.position = \"none\",         axis.title = element_blank(),         plot.title = element_text(hjust = 0.5, face = \"bold\")) +   ggtitle(\"position_circlepack()\")    # position_circlepackdodge() circlepackdodge_plot <- ggplot(dat, aes(x = x, y = y, color = group, size = size)) +   geom_point(alpha = 0.25,              position = position_circlepackdodge(width = 2,                                                   density = 0.25,                                                   aspect_ratio = 1)) +   coord_equal(xlim = c(-1, 1),                ylim = c(-1.1, 1.1)) +   theme_bw() +    theme(legend.position = \"none\",         axis.title = element_blank(),         plot.title = element_text(hjust = 0.5, face = \"bold\")) +   ggtitle(\"position_circlepackdodge()\")    circlepack_plot + circlepackdodge_plot # random size, base plot random <- ggplot(dat, aes(x = x, y = y, size = size)) +   geom_point(alpha = 0.25,              position = position_circlepack(density = 0.075,                                              aspect_ratio = 1)) +   coord_equal(xlim = c(-1, 1),                ylim = c(-1.1, 1.1)) +   theme_bw() +   theme(legend.position = \"none\",         axis.title = element_blank(),         plot.title = element_text(hjust = 0.5, face = \"bold\")) +   ggtitle(\"random\")  # ascending size ascending <- random %+%    arrange(dat, size) +    ggtitle(\"ascending\")  # descending size descending <- random %+%    arrange(dat, desc(size)) +    ggtitle(\"descending\")  random + ascending + descending"},{"path":"https://alexandercoppock.com/vayr/index.html/articles/vayr-vignette.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"vayr","text":"vayr also includes data Patriot Act experiment described Persuasion Parallel. Patriot Act anti-terrorism law, patriot_act dataset contains data relating experiment measured support law randomly exposing participants statements cast legislation either negative positive light. experiment conducted 2009 nationwide sample, replicated 2015 sample MTurkers. instances, treatments similar effect Democrats Republicans. four variables data: sample_label, study participant belonged pid_3, partisanship participant T1_content, statements participant exposed PA_support, participant’s post-treatment support Patriot Act data visualized using position_sunflowerdodge() vayr. Note density aspect_ratio adjusted. high density needed small point size, tall aspect_ratio accounts wide plot.","code":"# A df for statistical models summary_df <- patriot_act |>   group_by(T1_content, pid_3, sample_label) |>   reframe(tidy(lm_robust(PA_support ~ 1)))  # A df for direct labels label_df <- summary_df |>   filter(sample_label == \"Original Study\", T1_content == \"Control\") |>   mutate(     PA_support = case_when(       pid_3 == \"Democrat\" ~ conf.low - 0.15,       pid_3 == \"Republican\" ~ conf.high + 0.15     )   )  ggplot(patriot_act, aes(T1_content, PA_support, color = pid_3, group = pid_3)) +   # the data   geom_point(position = position_sunflowerdodge(width = 0.5,                                                  density = 50,                                                 aspect_ratio = 0.5),              size = 0.1, alpha = 0.5) +   # the statistical model   geom_line(data = summary_df, aes(x = T1_content, y = estimate),               position = position_dodge(width = 0.5), linewidth = 0.5) +     geom_point(data = summary_df, aes(x = T1_content, y = estimate),                position = position_dodge(width = 0.5), size = 3) +   geom_linerange(data = summary_df, aes(x = T1_content, y = estimate,                                         ymin = conf.low, ymax = conf.high),                  position = position_dodge(width = 0.5)) +   # the direct labels   geom_text(data = label_df, aes(label = pid_3)) +   # the rest   scale_color_manual(values = c(\"blue4\", \"red3\")) +   scale_y_continuous(breaks = 1:7) +   coord_fixed(ratio = 0.5) + # ratio for coord_fixed is y/x rather than x/y   facet_wrap(~sample_label) +   theme_bw() +   theme(legend.position = \"none\",         strip.background = element_blank(),         panel.grid.minor = element_blank()) +   labs(y = \"Do you oppose or support the Patriot Act?             [1: Oppose very strongly to 7: Support very strongly]\",        x = \"Randomly assigned information\")"},{"path":"https://alexandercoppock.com/vayr/index.html/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alexander Coppock. Author, maintainer, copyright holder. Elias Hyde. Contributor.","code":""},{"path":"https://alexandercoppock.com/vayr/index.html/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Coppock (2025). vayr: Extensions 'ggplot2' Visualize Randomize. R package version 1.0.0, https://alexandercoppock.com/vayr/index.html.","code":"@Manual{,   title = {vayr: Extensions for 'ggplot2' to Visualize as You Randomize},   author = {Alexander Coppock},   year = {2025},   note = {R package version 1.0.0},   url = {https://alexandercoppock.com/vayr/index.html}, }"},{"path":"https://alexandercoppock.com/vayr/index.html/index.html","id":"vayr","dir":"","previous_headings":"","what":"Extensions for ggplot2 to Visualize as You Randomize","title":"Extensions for ggplot2 to Visualize as You Randomize","text":"goal vayr provide ggplot2 extensions foster “visualize randomize” principles. principles outlined detail “Visualize Randomize: Design-Based Statistical Graphs Randomized Experiments.” paper can accessed PDF. package includes position adjustments avoid -plotting, facilitating organization “data-space” better contextualize statistical models.","code":""},{"path":"https://alexandercoppock.com/vayr/index.html/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Extensions for ggplot2 to Visualize as You Randomize","text":"release version vayr can installed CRAN, development version can installed GitHub using package like remotes, devtools, pak. important note vayr relies ggplot2, packcircles, withr, must installed well.","code":"# From CRAN install.packages(\"vayr\")  # From GitHub # install.packages(\"pak\") pak::pak(\"acoppock/vayr\")"},{"path":"https://alexandercoppock.com/vayr/index.html/index.html","id":"contents","dir":"","previous_headings":"","what":"Contents","title":"Extensions for ggplot2 to Visualize as You Randomize","text":"vayr contains handful ggplot2 functions apply position adjustments “point-like” geoms geom_point geom_text: position_jitter_ellipse() position_jitterdodge_ellipse() position_sunflower() position_sunflowerdodge() position_circlepack() position_circlepackdodge() functions avoid -plotting, especially useful plotting discrete rather continuous data. matter demonstration, used visualize synthetic data, -plotted origin. position product discrete variables alone, -plotting particular concern. position_jitter() can mitigate concern. introduces variation randomly sampling points rectangle. approach effective can unattractive. position adjustments vayr attempts better.","code":"library(dplyr) library(estimatr) library(ggplot2) library(patchwork) library(vayr)  dat <- data.frame(   x = c(rep(0, 200)),   y = c(rep(0, 200)),   group = (rep(c(\"A\", \"B\", \"B\", \"B\"), 50)),   size = runif(200, 0, 1) ) # perfectly over-plotted points over_plot <- ggplot(dat, aes(x = x, y = y)) +   geom_point() +   coord_equal(xlim = c(-1.1, 1.1),                ylim = c(-1.1, 1.1)) +   theme_bw() +   theme(axis.title = element_blank(),         plot.title = element_text(hjust = 0.5, face = \"bold\")) +   ggtitle('\"perfect over-plotting\"')  # position_jitter() jitter_plot <- ggplot(dat, aes(x = x, y = y)) +    geom_point(position = position_jitter(width = 0.5,                                          height = 0.5)) +   coord_equal(xlim = c(-1.1, 1.1),                ylim = c(-1.1, 1.1)) +   theme_bw() +   theme(axis.title = element_blank(),         plot.title = element_text(hjust = 0.5, face = \"bold\")) +   ggtitle(\"position_jitter()\")  over_plot + jitter_plot"},{"path":"https://alexandercoppock.com/vayr/index.html/index.html","id":"position-jitter-ellipse","dir":"","previous_headings":"Contents","what":"Position Jitter Ellipse","title":"Extensions for ggplot2 to Visualize as You Randomize","text":"position adjustment adds elliptical random noise perfectly -plotted points, offering pleasing way visualize many points represent position. benefit sampling ellipse given height width rather rectangle resulting dispersion retains impression single point. size ellipses stays constant, density varies depending amount data.","code":"# position_jitter_ellipse() jitter_ellipse_plot <- ggplot(dat, aes(x = x, y = y)) +   geom_point(position = position_jitter_ellipse(width = 0.5,                                                  height = 0.5)) +   coord_equal(xlim = c(-1.1, 1.1),                ylim = c(-1.1, 1.1)) +   theme_bw() +   theme(axis.title = element_blank(),         plot.title = element_text(hjust = 0.5, face = \"bold\")) +   ggtitle(\"position_jitter_ellipse()\")  # position_jitterdodge_ellipse() jitterdodge_ellipse_plot <- ggplot(dat, aes(x = x, y = y, color = group)) +   geom_point(position = position_jitterdodge_ellipse(dodge.width = 2,                                                       jitter.width = 0.5,                                                       jitter.height = 0.5)) +   coord_equal(xlim = c(-1.1, 1.1),                ylim = c(-1.1, 1.1)) +   theme_bw() +   theme(legend.position = \"none\",         axis.title = element_blank(),         plot.title = element_text(hjust = 0.5, face = \"bold\")) +   ggtitle(\"position_jitterdodge_ellipse()\")    jitter_ellipse_plot + jitterdodge_ellipse_plot"},{"path":"https://alexandercoppock.com/vayr/index.html/index.html","id":"position-sunflower","dir":"","previous_headings":"Contents","what":"Position Sunflower","title":"Extensions for ggplot2 to Visualize as You Randomize","text":"position adjustment arranges perfectly -plotted points using sunflower algorithm, produces pattern resembles seeds sunflower, working inside order data. parameters position adjustment density aspect_ratio. size flowers varies depending amount -plotting, density pattern remains constant. generally recommended position adjustment used along coord_equal(), case default aspect ratio 1 yields perfectly circular flowers, aspect ratio flowers can adjusted need .  density parameter controls density pattern. density 1 normalized 100 points unit circle; density 2, 200 points; density 0.5, 50 points. density normalized relative Cartesian units, visual effect depends ranges axes dimensions saved image; smaller ranges larger dimensions require greater density produce visual effect. size points also taken account.  aspect_ratio parameter changes aspect ratio flowers, width divided height. useful using position adjustment without coord_equal(). flowers can made wider taller compensate aspect ratio axes image. aspect ratio flowers set opposite aspect ratio must compensate. instance, consider plot anx axis ranges 0 1, y axis ranges 0 2. Saving plot square image squish y axis, resulting wider flowers. Setting aspect ratio flowers 0.5 offset distortion.","code":"# position_sunflower() sunflower_plot <- ggplot(dat, aes(x = x, y = y)) +   geom_point(position = position_sunflower(density = 1,                                             aspect_ratio = 1)) +   coord_equal(xlim = c(-2.1, 2.1),                ylim = c(-2.1, 2.1)) +   theme_bw() +   theme(axis.title = element_blank(),         plot.title = element_text(hjust = 0.5, face = \"bold\")) +   ggtitle(\"position_sunflower()\")    # position_sunflowerdodge() sunflowerdodge_plot <- ggplot(dat, aes(x = x, y = y, color = group)) +   geom_point(position = position_sunflowerdodge(width = 4,                                                  density = 1,                                                  aspect_ratio = 1)) +   coord_equal(xlim = c(-2.1, 2.1),                ylim = c(-2.1, 2.1)) +   theme_bw() +    theme(legend.position = \"none\",         axis.title = element_blank(),         plot.title = element_text(hjust = 0.5, face = \"bold\")) +   ggtitle(\"position_sunflowerdodge()\")    sunflower_plot + sunflowerdodge_plot"},{"path":"https://alexandercoppock.com/vayr/index.html/index.html","id":"position-circle-pack","dir":"","previous_headings":"Contents","what":"Position Circle Pack","title":"Extensions for ggplot2 to Visualize as You Randomize","text":"position adjustment uses circle packing algorithms packcircles arrange perfectly -plotted points varying sizes elliptical area. also takes density aspect_ratio parameters. position adjustment confused geom_circlepack() ggcirclepack can found GitHub.  Like position_sunflower() position_circlepack() works inside order data. arranging data size organizes points accordingly.","code":"# position_circlepack() circlepack_plot <- ggplot(dat, aes(x = x, y = y, size = size)) +   geom_point(alpha = 0.25,              position = position_circlepack(density = 0.25,                                              aspect_ratio = 1)) +   coord_equal(xlim = c(-1, 1),                ylim = c(-1.1, 1.1)) +   theme_bw() +   theme(legend.position = \"none\",         axis.title = element_blank(),         plot.title = element_text(hjust = 0.5, face = \"bold\")) +   ggtitle(\"position_circlepack()\")    # position_circlepackdodge() circlepackdodge_plot <- ggplot(dat, aes(x = x, y = y, color = group, size = size)) +   geom_point(alpha = 0.25,              position = position_circlepackdodge(width = 2,                                                   density = 0.25,                                                   aspect_ratio = 1)) +   coord_equal(xlim = c(-1, 1),                ylim = c(-1.1, 1.1)) +   theme_bw() +    theme(legend.position = \"none\",         axis.title = element_blank(),         plot.title = element_text(hjust = 0.5, face = \"bold\")) +   ggtitle(\"position_circlepackdodge()\")    circlepack_plot + circlepackdodge_plot # random size, base plot random <- ggplot(dat, aes(x = x, y = y, size = size)) +   geom_point(alpha = 0.25,              position = position_circlepack(density = 0.075,                                              aspect_ratio = 1)) +   coord_equal(xlim = c(-1, 1),                ylim = c(-1.1, 1.1)) +   theme_bw() +   theme(legend.position = \"none\",         axis.title = element_blank(),         plot.title = element_text(hjust = 0.5, face = \"bold\")) +   ggtitle(\"random\")  # ascending size ascending <- random %+%    arrange(dat, size) +    ggtitle(\"ascending\")  # descending size descending <- random %+%    arrange(dat, desc(size)) +    ggtitle(\"descending\")  random + ascending + descending"},{"path":"https://alexandercoppock.com/vayr/index.html/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Extensions for ggplot2 to Visualize as You Randomize","text":"vayr also includes data Patriot Act experiment described Persuasion Parallel. Patriot Act anti-terrorism law, patriot_act dataset contains data relating experiment measured support law randomly exposing participants statements cast legislation either negative positive light. experiment conducted 2009 nationwide sample, replicated 2015 sample MTurkers. instances, treatments similar effect Democrats Republicans. four variables data: sample_label, study participant belonged pid_3, partisanship participant T1_content, statements participant exposed PA_support, participant’s post-treatment support Patriot Act data visualized using position_sunflowerdodge() vayr. Note density aspect_ratio adjusted. high density needed small point size, tall aspect_ratio accounts wide plot.","code":"# A df for statistical models summary_df <- patriot_act |>   group_by(T1_content, pid_3, sample_label) |>   reframe(tidy(lm_robust(PA_support ~ 1)))  # A df for direct labels label_df <- summary_df |>   filter(sample_label == \"Original Study\", T1_content == \"Control\") |>   mutate(     PA_support = case_when(       pid_3 == \"Democrat\" ~ conf.low - 0.15,       pid_3 == \"Republican\" ~ conf.high + 0.15     )   )  ggplot(patriot_act, aes(T1_content, PA_support, color = pid_3, group = pid_3)) +   # the data   geom_point(position = position_sunflowerdodge(width = 0.5,                                                  density = 50,                                                 aspect_ratio = 0.5),              size = 0.1, alpha = 0.5) +   # the statistical model   geom_line(data = summary_df, aes(x = T1_content, y = estimate),               position = position_dodge(width = 0.5), linewidth = 0.5) +     geom_point(data = summary_df, aes(x = T1_content, y = estimate),                position = position_dodge(width = 0.5), size = 3) +   geom_linerange(data = summary_df, aes(x = T1_content, y = estimate,                                         ymin = conf.low, ymax = conf.high),                  position = position_dodge(width = 0.5)) +   # the direct labels   geom_text(data = label_df, aes(label = pid_3)) +   # the rest   scale_color_manual(values = c(\"blue4\", \"red3\")) +   scale_y_continuous(breaks = 1:7) +   coord_fixed(ratio = 0.5) + # ratio for coord_fixed is y/x rather than x/y   facet_wrap(~sample_label) +   theme_bw() +   theme(legend.position = \"none\",         strip.background = element_blank(),         panel.grid.minor = element_blank()) +   labs(y = \"Do you oppose or support the Patriot Act?             [1: Oppose very strongly to 7: Support very strongly]\",        x = \"Randomly assigned information\")"},{"path":"https://alexandercoppock.com/vayr/index.html/reference/patriot_act.html","id":null,"dir":"Reference","previous_headings":"","what":"Original and Replication data for the Patriot Act experiment described in Persuasion in Parallel — patriot_act","title":"Original and Replication data for the Patriot Act experiment described in Persuasion in Parallel — patriot_act","text":"Original Replication data Patriot Act experiment described Persuasion Parallel","code":""},{"path":"https://alexandercoppock.com/vayr/index.html/reference/patriot_act.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Original and Replication data for the Patriot Act experiment described in Persuasion in Parallel — patriot_act","text":"","code":"patriot_act"},{"path":[]},{"path":"https://alexandercoppock.com/vayr/index.html/reference/patriot_act.html","id":"patriot-act","dir":"Reference","previous_headings":"","what":"patriot_act","title":"Original and Replication data for the Patriot Act experiment described in Persuasion in Parallel — patriot_act","text":"data frame 2062 rows 4 columns: sample_label original study (Chong Druckman (2011) Mechanical Turk replication) pid_3 Subject partisanship (limited Republicans Democracts, including leaners) T1_content Content assigned treatment condition: pro-Patriot act statements, anti-Patriot act statements, control PA_support Post-treatment support Patriot Act 1 7 Likert scale","code":""},{"path":"https://alexandercoppock.com/vayr/index.html/reference/patriot_act.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Original and Replication data for the Patriot Act experiment described in Persuasion in Parallel — patriot_act","text":"https://doi.org/10.7910/DVN/I9GSKI","code":""},{"path":"https://alexandercoppock.com/vayr/index.html/reference/position_circlepack.html","id":null,"dir":"Reference","previous_headings":"","what":"Arrange over-plotted points with a circle-packing algorithm — position_circlepack","title":"Arrange over-plotted points with a circle-packing algorithm — position_circlepack","text":"function uses circle packing algorithm 'packcircles' package arrange perfectly -plotted points varying sizes elliptical area.","code":""},{"path":"https://alexandercoppock.com/vayr/index.html/reference/position_circlepack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arrange over-plotted points with a circle-packing algorithm — position_circlepack","text":"","code":"position_circlepack(density = 1, aspect_ratio = 1)"},{"path":"https://alexandercoppock.com/vayr/index.html/reference/position_circlepack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arrange over-plotted points with a circle-packing algorithm — position_circlepack","text":"density density circle pack, defaults 1 adjusted cases. desirable density depend ranges axes dimensions image. also depend size scale. aspect_ratio aspect ratio adjustment compensate distortion circular arrangement, might occur plotting coord_equal() used. wide aspect ratio (eg. 2) adjust vertical stretching, whereas tall aspect ratio (eg. 0.5) adjust horizontal stretching. default aspect ratio 1 appropriate adjustment required.","code":""},{"path":"https://alexandercoppock.com/vayr/index.html/reference/position_circlepack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arrange over-plotted points with a circle-packing algorithm — position_circlepack","text":"ggproto object class PositionCirclePack.","code":""},{"path":[]},{"path":"https://alexandercoppock.com/vayr/index.html/reference/position_circlepack.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arrange over-plotted points with a circle-packing algorithm — position_circlepack","text":"","code":"library(ggplot2)   library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union   library(randomizr)   library(tibble)    dat <- data.frame(     X = c(rep(0, 200)),     Y = rep(0, 200),     size = runif(200, 0, 1)   )    ggplot(dat, aes(x = X, y = Y, size = size)) +     geom_point(position = position_circlepack(density = 0.25, aspect_ratio = 1),               alpha = 0.25) +     coord_equal(xlim = c(-1, 1), ylim = c(-1, 1), expand = TRUE) +     theme(legend.position = \"none\")     # Applied to a mock experiment with weighted groups    dat <-     tibble(       age_group = rep(c(\"young\", \"middle\", \"old\"), c(100, 200, 300)),       treatment = block_ra(age_group, block_m = c(50, 50, 50)),       latent_outcome =         case_when(age_group == \"young\" & treatment == 0 ~ 0.10,                   age_group == \"young\" & treatment == 1 ~ 0.20,                   age_group == \"middle\" & treatment == 0 ~ 0.40,                   age_group == \"middle\" & treatment == 1 ~ 0.45,                   age_group == \"old\" & treatment == 0 ~ 0.70,                   age_group == \"old\" & treatment == 1 ~ 0.90),       outcome = rbinom(600, size = 1,                        prob = latent_outcome)   )    dat <-     dat |>     mutate(       treatment_prob =         case_when(age_group == \"young\" ~ 50/100,                   age_group == \"middle\" ~ 50/200,                   age_group == \"old\" ~ 50/300),       weights = 1/case_when(treatment == 1 ~ treatment_prob,                             treatment == 0 ~ 1 - treatment_prob)     )    ggplot(dat, aes(treatment, outcome, size = weights, color = age_group)) +     geom_point(alpha = 0.5, position = position_circlepack(density = 0.5))"},{"path":"https://alexandercoppock.com/vayr/index.html/reference/position_circlepackdodge.html","id":null,"dir":"Reference","previous_headings":"","what":"Arrange over-plotted points with a circle-packing algorithm and dodge groups side-to-side — position_circlepackdodge","title":"Arrange over-plotted points with a circle-packing algorithm and dodge groups side-to-side — position_circlepackdodge","text":"function dodges groups uses circle packing algorithm 'packcircles' package arrange perfectly -plotted points varying sizes elliptical area.","code":""},{"path":"https://alexandercoppock.com/vayr/index.html/reference/position_circlepackdodge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arrange over-plotted points with a circle-packing algorithm and dodge groups side-to-side — position_circlepackdodge","text":"","code":"position_circlepackdodge(width = 1, density = 1, aspect_ratio = 1)"},{"path":"https://alexandercoppock.com/vayr/index.html/reference/position_circlepackdodge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arrange over-plotted points with a circle-packing algorithm and dodge groups side-to-side — position_circlepackdodge","text":"width dodging width, defaults 1. density density circle pack, defaults 1 adjusted cases. desirable density depend ranges axes dimensions image. also depend size scale. aspect_ratio aspect ratio adjustment compensate distortion circular arrangement, might occur plotting coord_equal() used. wide aspect ratio (eg. 2) adjust vertical stretching, whereas tall aspect ratio (eg. 0.5) adjust horizontal stretching. default aspect ratio 1 appropriate adjustment required.","code":""},{"path":"https://alexandercoppock.com/vayr/index.html/reference/position_circlepackdodge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arrange over-plotted points with a circle-packing algorithm and dodge groups side-to-side — position_circlepackdodge","text":"ggproto object class PositionCirclePackDodge.","code":""},{"path":[]},{"path":"https://alexandercoppock.com/vayr/index.html/reference/position_circlepackdodge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arrange over-plotted points with a circle-packing algorithm and dodge groups side-to-side — position_circlepackdodge","text":"","code":"library(ggplot2)    dat <- data.frame(     X = c(rep(0, 200)),     Y = rep(0, 200),     size = runif(200, 0, 1),     id = (rep(c(\"A\", \"B\"), 100))   )    ggplot(dat, aes(x = X, y = Y, size = size, color = id)) +     geom_point(position = position_circlepackdodge(width = 1, density = 1, aspect_ratio = 1),               alpha = 0.25) +     coord_equal(xlim = c(-1, 1), ylim = c(-1, 1), expand = TRUE) +     scale_size_continuous(range = c(1, 3)) +     theme(legend.position = \"none\")"},{"path":"https://alexandercoppock.com/vayr/index.html/reference/position_jitter_ellipse.html","id":null,"dir":"Reference","previous_headings":"","what":"Jitter points on an ellipse to avoid over-plotting — position_jitter_ellipse","title":"Jitter points on an ellipse to avoid over-plotting — position_jitter_ellipse","text":"function adds elliptical random noise perfectly -plotted points, offering pleasing way visualize many points represent position. contrast position_jitter() function samples rectangular field, position_jitter_ellipse() function samples elliptical field. function takes algorithmic inspiration https://stackoverflow.com/questions/5529148/algorithm-calculate-pseudo-random-point-inside--ellipse https://stats.stackexchange.com/questions/120527/simulate--uniform-distribution---disc.","code":""},{"path":"https://alexandercoppock.com/vayr/index.html/reference/position_jitter_ellipse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Jitter points on an ellipse to avoid over-plotting — position_jitter_ellipse","text":"","code":"position_jitter_ellipse(width = NULL, height = NULL, seed = NA)"},{"path":"https://alexandercoppock.com/vayr/index.html/reference/position_jitter_ellipse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Jitter points on an ellipse to avoid over-plotting — position_jitter_ellipse","text":"width, height dimensions elliptical field, -plotted points sampled. seed random seed reproducibility.","code":""},{"path":"https://alexandercoppock.com/vayr/index.html/reference/position_jitter_ellipse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Jitter points on an ellipse to avoid over-plotting — position_jitter_ellipse","text":"ggproto object class PositionJitterEllipse.","code":""},{"path":[]},{"path":"https://alexandercoppock.com/vayr/index.html/reference/position_jitter_ellipse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Jitter points on an ellipse to avoid over-plotting — position_jitter_ellipse","text":"","code":"library(ggplot2)    dat <- data.frame(x = rep(1, 500), y = rep(1, 500))    # Jitter on an ellipse.   ggplot(dat, aes(x, y)) +     geom_point(position = position_jitter_ellipse(width = 0.5, height = 0.5)) +     coord_cartesian(xlim = c(0, 2), ylim = c(0, 2))     # Jitter on a rectangle, for comparison.   ggplot(dat, aes(x, y)) +     geom_point(position = position_jitter(width = 0.5, height = 0.5)) +     coord_cartesian(xlim = c(0, 2), ylim = c(0, 2))"},{"path":"https://alexandercoppock.com/vayr/index.html/reference/position_jitterdodge_ellipse.html","id":null,"dir":"Reference","previous_headings":"","what":"Jitter points on an ellipse and dodge groups side-to-side — position_jitterdodge_ellipse","title":"Jitter points on an ellipse and dodge groups side-to-side — position_jitterdodge_ellipse","text":"function dodges groups points side--side adds elliptical random noise perfectly -plotted points. See position_jitter_ellipse() documentation information.","code":""},{"path":"https://alexandercoppock.com/vayr/index.html/reference/position_jitterdodge_ellipse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Jitter points on an ellipse and dodge groups side-to-side — position_jitterdodge_ellipse","text":"","code":"position_jitterdodge_ellipse(   jitter.width = NULL,   jitter.height = NULL,   dodge.width = 1,   seed = NA )"},{"path":"https://alexandercoppock.com/vayr/index.html/reference/position_jitterdodge_ellipse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Jitter points on an ellipse and dodge groups side-to-side — position_jitterdodge_ellipse","text":"jitter.width, jitter.height dimensions elliptical field, -plotted points sampled. dodge.width dodging width, defaults 1. seed random seed reproducibility.","code":""},{"path":"https://alexandercoppock.com/vayr/index.html/reference/position_jitterdodge_ellipse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Jitter points on an ellipse and dodge groups side-to-side — position_jitterdodge_ellipse","text":"ggproto object class PositionJitterdodgeEllipse.","code":""},{"path":[]},{"path":"https://alexandercoppock.com/vayr/index.html/reference/position_jitterdodge_ellipse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Jitter points on an ellipse and dodge groups side-to-side — position_jitterdodge_ellipse","text":"","code":"library(ggplot2)    dat <- data.frame(x = rep(1, 500), y = rep(1, 500),                     group = sample(LETTERS[1:2], 500, replace = TRUE))    ggplot(dat, aes(x, y, shape = group, color = group)) +     geom_point(position = position_jitterdodge_ellipse(jitter.width  = 0.5,                                                        jitter.height =  0.5,                                                        dodge.width = 1)) +     coord_cartesian(xlim = c(0, 2), ylim = c(0, 2))"},{"path":"https://alexandercoppock.com/vayr/index.html/reference/position_sunflower.html","id":null,"dir":"Reference","previous_headings":"","what":"Arrange over-plotted points in a sunflower pattern — position_sunflower","title":"Arrange over-plotted points in a sunflower pattern — position_sunflower","text":"function applies sunflower algorithm, executed sunflower() function, position adjustment, arranging overlapping points given x y sunflower pattern. See sunflower() documentation information.","code":""},{"path":"https://alexandercoppock.com/vayr/index.html/reference/position_sunflower.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arrange over-plotted points in a sunflower pattern — position_sunflower","text":"","code":"position_sunflower(density = 1, aspect_ratio = 1)"},{"path":"https://alexandercoppock.com/vayr/index.html/reference/position_sunflower.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arrange over-plotted points in a sunflower pattern — position_sunflower","text":"density pattern density, defaults 1 adjusted cases. desirable density depend ranges axes dimensions image. aspect_ratio aspect ratio adjustment compensate distortion circular arrangement, might occur plotting coord_equal() used. wide aspect ratio (eg. 2) adjust vertical stretching, whereas tall aspect ratio (eg. 0.5) adjust horizontal stretching. default aspect ratio 1 appropriate adjustment required.","code":""},{"path":"https://alexandercoppock.com/vayr/index.html/reference/position_sunflower.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arrange over-plotted points in a sunflower pattern — position_sunflower","text":"ggproto object class PositionSunflower.","code":""},{"path":[]},{"path":"https://alexandercoppock.com/vayr/index.html/reference/position_sunflower.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arrange over-plotted points in a sunflower pattern — position_sunflower","text":"","code":"library(ggplot2)    # Use the sunflower position function to arrange N points   N <- 100    dat <- data.frame(     x = rep(1:4, times = N),     y = rep(1:4, times = N)   )    ggplot(dat, aes(x = x, y = y)) +     geom_point(size = 1, position = position_sunflower(density = 1, aspect_ratio = 1)) +     xlim(0, 5) +     ylim(0, 5) +     coord_equal()"},{"path":"https://alexandercoppock.com/vayr/index.html/reference/position_sunflowerdodge.html","id":null,"dir":"Reference","previous_headings":"","what":"Arrange over-plotted points in a sunflower pattern and dodge groups side-to-side — position_sunflowerdodge","title":"Arrange over-plotted points in a sunflower pattern and dodge groups side-to-side — position_sunflowerdodge","text":"function applies sunflower position adjustment alongside dodge position adjustment, arranging overlapping points per x, y, group sunflower pattern. See sunflower() documentation information.","code":""},{"path":"https://alexandercoppock.com/vayr/index.html/reference/position_sunflowerdodge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arrange over-plotted points in a sunflower pattern and dodge groups side-to-side — position_sunflowerdodge","text":"","code":"position_sunflowerdodge(width = 1, density = 1, aspect_ratio = 1)"},{"path":"https://alexandercoppock.com/vayr/index.html/reference/position_sunflowerdodge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arrange over-plotted points in a sunflower pattern and dodge groups side-to-side — position_sunflowerdodge","text":"width dodging width, defaults 1. density pattern density, defaults 1 adjusted cases. desirable density depend ranges axes dimensions image. aspect_ratio aspect ratio adjustment compensate distortion circular arrangement, might occur plotting coord_equal() used. wide aspect ratio (eg. 2) adjust vertical stretching, whereas tall aspect ratio (eg. 0.5) adjust horizontal stretching. default aspect ratio 1 appropriate adjustment required.","code":""},{"path":"https://alexandercoppock.com/vayr/index.html/reference/position_sunflowerdodge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arrange over-plotted points in a sunflower pattern and dodge groups side-to-side — position_sunflowerdodge","text":"ggproto object class PositionSunflowerDodge.","code":""},{"path":[]},{"path":"https://alexandercoppock.com/vayr/index.html/reference/position_sunflowerdodge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arrange over-plotted points in a sunflower pattern and dodge groups side-to-side — position_sunflowerdodge","text":"","code":"library(ggplot2)    # Use the sunflower dodge position function to arrange and dodge N points.   N <- 300    dat <- data.frame(     x = sample(1:2, size = N, replace = TRUE),     y = sample(1:7, size = N, replace = TRUE),     type = factor(sample(LETTERS[1:2], N, replace = TRUE))   )    # With coord_equal   ggplot(dat, aes(x, y, color = type, shape = type)) +     geom_point(position = position_sunflowerdodge(width = 0.5, density = 2, aspect_ratio = 1)) +     coord_equal()     # Without coord_equal, might want to play with aspect ratio to get a pleasing plot   ggplot(dat, aes(x, y, color = type, shape = type)) +     geom_point(position = position_sunflowerdodge(width = 0.5, density = 10, aspect_ratio = 1/4))"},{"path":"https://alexandercoppock.com/vayr/index.html/reference/sunflower.html","id":null,"dir":"Reference","previous_headings":"","what":"Distribute points using a sunflower seed algorithm — sunflower","title":"Distribute points using a sunflower seed algorithm — sunflower","text":"function distributes points ellipse via sunflower seed algorithm solution -plotting. implement algorithm, function adapts code https://stackoverflow.com/questions/28567166/uniformly-distribute-x-points-inside--circle.","code":""},{"path":"https://alexandercoppock.com/vayr/index.html/reference/sunflower.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distribute points using a sunflower seed algorithm — sunflower","text":"","code":"sunflower(x = NULL, y = NULL, density, aspect_ratio)"},{"path":"https://alexandercoppock.com/vayr/index.html/reference/sunflower.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distribute points using a sunflower seed algorithm — sunflower","text":"x, y identical coordinates multiple -plotted points, vectors, arranged using sunflower seed algorithm. density pattern density. aspect_ratio aspect ratio adjustment compensate distortion circular arrangement, might occur plotting coord_equal() used. wide aspect ratio (eg. 2) adjust vertical stretching, whereas tall aspect ratio (eg. 0.5) adjust horizontal stretching. aspect ratio 1 appropriate adjustment required.","code":""},{"path":"https://alexandercoppock.com/vayr/index.html/reference/sunflower.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distribute points using a sunflower seed algorithm — sunflower","text":"numeric vector adjusted x y positions, computed using sunflower seed algorithm.","code":""},{"path":[]},{"path":"https://alexandercoppock.com/vayr/index.html/reference/sunflower.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distribute points using a sunflower seed algorithm — sunflower","text":"","code":"library(ggplot2)   library(dplyr)    # Manually adjust position of N points,   # arranging them per the sunflower algorithm and then dodging groups   N <- 300    dat <- data.frame(     x = sample(1:2, size = N, replace = TRUE),     y = sample(1:7, size = N, replace = TRUE),     type = factor(sample(LETTERS[1:2], N, replace = TRUE))   ) |>     group_by(x, y, type) |>     mutate(       x = sunflower(x = x, density = 1, aspect_ratio = 1),       y = sunflower(y = y, density = 1, aspect_ratio = 1),       x = if_else(type == \"A\", x - (1 / 8), x + (1 / 8))     )    ggplot(dat, aes(x, y, color = type, shape = type)) +     geom_point() + coord_equal()"},{"path":"https://alexandercoppock.com/vayr/index.html/reference/vayr.html","id":null,"dir":"Reference","previous_headings":"","what":"Extensions for 'ggplot2' to Visualize as You Randomize — vayr","title":"Extensions for 'ggplot2' to Visualize as You Randomize — vayr","text":"Position adjustments 'ggplot2' implement \"visualize randomize\" principles, can especially useful plotting experimental data.","code":""},{"path":"https://alexandercoppock.com/vayr/index.html/reference/vayr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extensions for 'ggplot2' to Visualize as You Randomize — vayr","text":"'vayr' package provides 'ggplot2' extensions foster \"visualize randomize\" principles. principles guide visualization experimental data. Thus far, package includes position adjustments avoid -plotting, facilitating plotting \"data-space.\" 'vayr' paper : https://alexandercoppock.com/coppock_2020.pdf.","code":""},{"path":[]},{"path":"https://alexandercoppock.com/vayr/index.html/reference/vayr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extensions for 'ggplot2' to Visualize as You Randomize — vayr","text":"Maintainer: Alexander Coppock acoppock@gmail.com (ORCID) [copyright holder] contributors: Elias Hyde eliasworrallhyde@gmail.com [contributor]","code":""},{"path":"https://alexandercoppock.com/vayr/index.html/news/index.html","id":"vayr-100","dir":"Changelog","previous_headings":"","what":"vayr 1.0.0","title":"vayr 1.0.0","text":"Initial CRAN submission. first release ‘vayr’ includes three position adjustments dodged counterparts: position_jitter_ellipse() position_jitterdodge_ellipse(); position_sunflower() position_sunflower_dodge(); position_circlepack() position_circlepack_dodge().","code":""}]
