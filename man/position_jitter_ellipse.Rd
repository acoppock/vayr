% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/position_jitter_ellipse.R
\name{position_jitter_ellipse}
\alias{position_jitter_ellipse}
\title{Jitter points (on an ellipse) to avoid overplotting}
\usage{
position_jitter_ellipse(width = NULL, height = NULL, seed = NA)
}
\arguments{
\item{width, height}{Amount of vertical and horizontal jitter. The jitter
is added in both positive and negative directions, so the total spread
is twice the value specified here.

If omitted, defaults to 40\% of the resolution of the data: this means the
jitter values will occupy 80\% of the implied bins. Categorical data
is aligned on the integers, so a width or height of 0.5 will spread the
data so it's not possible to see the distinction between the categories.}

\item{seed}{A random seed to make the jitter reproducible.
Useful if you need to apply the same jitter twice, e.g., for a point and
a corresponding label.
The random seed is reset after jittering.
If \code{NA} (the default value), the seed is initialised with a random value;
this makes sure that two subsequent calls start with a different seed.
Use \code{NULL} to use the current random seed and also avoid resetting
(the behaviour of \pkg{ggplot} 2.2.1 and earlier).}
}
\description{
Adding ellipical random noise to points that are perfectly overplotted gives a pleasing way to visualize many plotted points that represent the same position. In contrast to position_jitter which samples on a rectangle, position_jitter_ellipse samples on an ellipse.
}
\details{
See: https://stackoverflow.com/questions/5529148/algorithm-calculate-pseudo-random-point-inside-an-ellipse and https://stats.stackexchange.com/questions/120527/simulate-a-uniform-distribution-on-a-disc
}
\examples{

library(ggplot2)
dat <- data.frame(x = rep(1, 500), y = rep(1, 500))

ggplot(dat, aes(x, y)) +
geom_point(position = position_jitter_ellipse(width = 0.5, height = 0.5)) +
coord_cartesian(xlim = c(0, 2), ylim = c(0, 2))

# for comparision:

ggplot(dat, aes(x, y)) +
geom_point(position = position_jitter(width = 0.5, height = 0.5)) +
coord_cartesian(xlim = c(0, 2), ylim = c(0, 2))


}
